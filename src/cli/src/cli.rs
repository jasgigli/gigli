//! CLI argument parsing for Gigli
use clap::{Arg, Command, Subcommand};

pub fn build_cli() -> Command {
    Command::new("gigli")
        .version("0.2.0")
        .about("Gigli Programming Language Compiler")
        .subcommand_negates_reqs(true)
        .arg_required_else_help(true)
        .subcommand(
            Command::new("build")
                .about("Compile a Gigli project")
                .arg(
                    Arg::new("INPUT")
                        .help("Input file or directory")
                        .required(true)
                        .value_name("FILE|DIR")
                )
                .arg(
                    Arg::new("OUTPUT")
                        .help("Output directory")
                        .short('o')
                        .long("output")
                        .value_name("DIR")
                        .default_value("dist")
                )
                .arg(
                    Arg::new("TARGET")
                        .help("Target platform")
                        .short('t')
                        .long("target")
                        .value_name("PLATFORM")
                        .value_parser(["web", "native", "wasm"])
                        .default_value("web")
                )
                .arg(
                    Arg::new("MODE")
                        .help("Build mode")
                        .short('m')
                        .long("mode")
                        .value_name("MODE")
                        .value_parser(["debug", "release"])
                        .default_value("debug")
                )
                .arg(
                    Arg::new("WATCH")
                        .help("Watch for changes and rebuild")
                        .short('w')
                        .long("watch")
                        .action(clap::ArgAction::SetTrue)
                )
        )
        .subcommand(
            Command::new("run")
                .about("Compile and run a Gigli project")
                .arg(
                    Arg::new("INPUT")
                        .help("Input file")
                        .required(true)
                        .value_name("FILE")
                )
                .arg(
                    Arg::new("PORT")
                        .help("Server port")
                        .short('p')
                        .long("port")
                        .value_name("PORT")
                        .default_value("3000")
                )
                .arg(
                    Arg::new("HOST")
                        .help("Server host")
                        .long("host")
                        .value_name("HOST")
                        .default_value("localhost")
                )
                .arg(
                    Arg::new("OPEN")
                        .help("Open browser automatically")
                        .short('o')
                        .long("open")
                        .action(clap::ArgAction::SetTrue)
                )
        )
        .subcommand(
            Command::new("dev")
                .about("Start development server")
                .arg(
                    Arg::new("INPUT")
                        .help("Input file (defaults to src/App.gx)")
                        .required(false)
                        .value_name("FILE")
                )
                .arg(
                    Arg::new("PORT")
                        .help("Server port")
                        .short('p')
                        .long("port")
                        .value_name("PORT")
                        .default_value("3000")
                )
                .arg(
                    Arg::new("HOST")
                        .help("Server host")
                        .long("host")
                        .value_name("HOST")
                        .default_value("localhost")
                )
                .arg(
                    Arg::new("OPEN")
                        .help("Open browser automatically")
                        .short('o')
                        .long("open")
                        .action(clap::ArgAction::SetTrue)
                )
        )
        .subcommand(
            Command::new("bundle")
                .about("Bundle project for web deployment")
                .arg(
                    Arg::new("INPUT")
                        .help("Input file")
                        .required(true)
                        .value_name("FILE")
                )
                .arg(
                    Arg::new("OUTPUT")
                        .help("Output directory")
                        .short('o')
                        .long("output")
                        .value_name("DIR")
                        .default_value("dist")
                )
                .arg(
                    Arg::new("MINIFY")
                        .help("Minify output")
                        .short('m')
                        .long("minify")
                        .action(clap::ArgAction::SetTrue)
                )
                .arg(
                    Arg::new("SOURCE_MAP")
                        .help("Generate source maps")
                        .long("source-map")
                        .action(clap::ArgAction::SetTrue)
                )
        )
        .subcommand(
            Command::new("fmt")
                .about("Format code")
                .arg(
                    Arg::new("INPUT")
                        .help("Input file or directory")
                        .required(true)
                        .value_name("FILE|DIR")
                )
                .arg(
                    Arg::new("CHECK")
                        .help("Check formatting without modifying files")
                        .short('c')
                        .long("check")
                        .action(clap::ArgAction::SetTrue)
                )
        )
        .subcommand(
            Command::new("lint")
                .about("Lint code")
                .arg(
                    Arg::new("INPUT")
                        .help("Input file or directory")
                        .required(true)
                        .value_name("FILE|DIR")
                )
                .arg(
                    Arg::new("FIX")
                        .help("Fix issues automatically")
                        .short('f')
                        .long("fix")
                        .action(clap::ArgAction::SetTrue)
                )
        )
        .subcommand(
            Command::new("test")
                .about("Run tests")
                .arg(
                    Arg::new("INPUT")
                        .help("Input file or directory")
                        .required(true)
                        .value_name("FILE|DIR")
                )
                .arg(
                    Arg::new("WATCH")
                        .help("Watch for changes")
                        .short('w')
                        .long("watch")
                        .action(clap::ArgAction::SetTrue)
                )
                .arg(
                    Arg::new("COVERAGE")
                        .help("Generate coverage report")
                        .short('c')
                        .long("coverage")
                        .action(clap::ArgAction::SetTrue)
                )
        )
        .subcommand(
            Command::new("init")
                .about("Initialize a new project")
                .visible_alias("new")
                .arg(
                    Arg::new("NAME")
                        .help("Project name")
                        .required(true)
                        .value_name("NAME")
                )
                .arg(
                    Arg::new("TEMPLATE")
                        .help("Project template")
                        .short('t')
                        .long("template")
                        .value_name("TEMPLATE")
                        .default_value("basic")
                )
                .arg(
                    Arg::new("DIR")
                        .help("Project directory")
                        .short('d')
                        .long("dir")
                        .value_name("DIR")
                )
        )
        .subcommand(
            Command::new("install")
                .about("Install dependencies")
                .arg(
                    Arg::new("PACKAGE")
                        .help("Package to install")
                        .value_name("PACKAGE")
                )
                .arg(
                    Arg::new("GLOBAL")
                        .help("Install globally")
                        .short('g')
                        .long("global")
                        .action(clap::ArgAction::SetTrue)
                )
        )
        .subcommand(
            Command::new("publish")
                .about("Publish package")
                .arg(
                    Arg::new("INPUT")
                        .help("Input file or directory")
                        .required(true)
                        .value_name("FILE|DIR")
                )
                .arg(
                    Arg::new("DRY_RUN")
                        .help("Dry run (don't actually publish)")
                        .long("dry-run")
                        .action(clap::ArgAction::SetTrue)
                )
        )
        .subcommand(
            Command::new("repl")
                .about("Start REPL")
                .arg(
                    Arg::new("FILE")
                        .help("File to load")
                        .value_name("FILE")
                )
        )
        .subcommand(
            Command::new("version")
                .about("Show version information")
        )
        .subcommand(
            Command::new("doctor")
                .about("Check system requirements")
        )
}
