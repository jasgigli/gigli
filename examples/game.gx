// Example: Simple Snake Game in GigliOptix
view SnakeGame {
  cell snake = [{x: 10, y: 10}]
  cell food = {x: 15, y: 15}
  cell direction = "right"
  cell game_over = false
  cell score = 0
  cell game_speed = 200

  fn move_snake() {
    if game_over {
      return
    }

    let head = snake[0]
    let new_head = match direction {
      "up" => {x: head.x, y: head.y - 1},
      "down" => {x: head.x, y: head.y + 1},
      "left" => {x: head.x - 1, y: head.y},
      "right" => {x: head.x + 1, y: head.y}
    }

    // Check wall collision
    if new_head.x < 0 || new_head.x >= 20 || new_head.y < 0 || new_head.y >= 20 {
      game_over = true
      return
    }

    // Check self collision
    for segment in snake {
      if segment.x == new_head.x && segment.y == new_head.y {
        game_over = true
        return
      }
    }

    snake.insert(0, new_head)

    // Check food collision
    if new_head.x == food.x && new_head.y == food.y {
      score += 10
      generate_food()
    } else {
      snake.pop()
    }
  }

  fn generate_food() {
    food = {
      x: Math::random() * 20,
      y: Math::random() * 20
    }
  }

  fn change_direction(new_direction) {
    let opposites = {
      "up": "down",
      "down": "up",
      "left": "right",
      "right": "left"
    }

    if opposites[direction] != new_direction {
      direction = new_direction
    }
  }

  fn restart_game() {
    snake = [{x: 10, y: 10}]
    food = {x: 15, y: 15}
    direction = "right"
    game_over = false
    score = 0
  }

  on_mount: {
    setInterval(move_snake, game_speed)

    // Keyboard controls
    document.addEventListener("keydown", (event) => {
      match event.key {
        "ArrowUp" => change_direction("up"),
        "ArrowDown" => change_direction("down"),
        "ArrowLeft" => change_direction("left"),
        "ArrowRight" => change_direction("right"),
        "r" => restart_game(),
        _ => {}
      }
    })
  }

  style:
    font_family: "Arial, sans-serif",
    text_align: "center",
    max_width: "600px",
    margin: "0 auto",
    padding: "20px"

  render:
    div {
      h1("Snake Game")
      div(style: "font-size: 24px; margin: 10px 0")("Score: " + score)

      if game_over {
        div {
          h2(style: "color: #ff6b6b")("Game Over!")
          button(
            on_click: restart_game,
            style: "padding: 10px 20px; background: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer"
          )("Restart")
        }
      }

      div(
        style: "display: grid; grid-template-columns: repeat(20, 20px); gap: 1px; background: #333; padding: 10px; margin: 20px auto; width: fit-content"
      ) {
        for y in 0..20 {
          for x in 0..20 {
            let is_snake = snake.some(segment => segment.x == x && segment.y == y)
            let is_food = food.x == x && food.y == y

            div(
              style: "width: 20px; height: 20px; background: " +
                     if is_snake then "#4CAF50" else
                     if is_food then "#ff6b6b" else "#222"
            )("")
          }
        }
      }

      div(style: "margin-top: 20px") {
        p("Use arrow keys to control the snake")
        p("Press 'R' to restart")
      }
    }
}
